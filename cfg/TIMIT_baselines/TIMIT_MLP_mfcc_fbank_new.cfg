[cfg_proto]
	cfg_proto = proto/config.proto
	cfg_proto_chunk = proto/global_chunk.proto
[/cfg_proto]

[exp]
	cmd = 
	run_nn_script = run_nn
	out_folder = exp/TIMIT_MLP_mfcc_fbank
	seed = 1234
	use_cuda = True
	multi_gpu = False
	n_epochs_tr = 20
	save_models_ep = last
	skip_training = True
	skip_evaluation = True
[/exp]

[datasets]
	[dataset1]
		data_name = TIMIT_tr
		data_use = training
		n_chunks = 5
		[fea1]
			fea_name = mfcc
			fea_lst = quick_test/data/train/feats_mfcc.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/train/utt2spk  ark:quick_test/mfcc/train_cmvn_speaker.ark ark:- ark:- | add-deltas --delta-order=2 ark:- ark:- |
		[/fea1]

		[fea2]
			fea_name = fbank
			fea_lst = quick_test/data/train/feats_fbank.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/train/utt2spk  ark:quick_test/fbank/cmvn_train.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
		[/fea2]

		[fea3]
			fea_name = fmllr
			fea_lst = quick_test/data/train/feats_fmllr.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/train/utt2spk  ark:quick_test/data-fmllr-tri3/train/train_cmvn.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
		[/fea3]

		[lab1]
			lab_name = lab_phone_cd
			lab_type = sequence_like_features
			lab_proto = proto/labels/kaldi.proto
			lab_library = data_io
			lab_class = kaldi_lab
			lab_kaldi_folder = quick_test/dnn4_pretrain-dbn_dnn_ali
			lab_kaldi_opts = ali-to-pdf
		[/lab1]

		[lab2]
			lab_name = lab_phone_mono
			lab_type = sequence_like_features
			lab_proto = proto/labels/kaldi.proto
			lab_library = data_io
			lab_class = kaldi_lab
			lab_kaldi_folder = quick_test/dnn4_pretrain-dbn_dnn_ali
			lab_kaldi_opts = ali-to-phones --per-frame=true
		[/lab2]

	[/dataset1]

	[dataset2]
		data_name = TIMIT_dev
		data_use = validation
		n_chunks = 1
		[fea1]
			fea_name = mfcc
			fea_lst = quick_test/data/dev/feats_mfcc.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/dev/utt2spk  ark:quick_test/mfcc/dev_cmvn_speaker.ark ark:- ark:- | add-deltas --delta-order=2 ark:- ark:- |
		[/fea1]

		[fea2]
			fea_name = fbank
			fea_lst = quick_test/data/dev/feats_fbank.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/dev/utt2spk  ark:quick_test/fbank/cmvn_dev.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
		[/fea2]

		[fea3]
			fea_name = fmllr
			fea_lst = quick_test/data/dev/feats_fmllr.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/dev/utt2spk  ark:quick_test/data-fmllr-tri3/dev/dev_cmvn.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
		[/fea3]

		[lab1]
			lab_name = lab_phone_cd
			lab_type = sequence_like_features
			lab_proto = proto/labels/kaldi.proto
			lab_library = data_io
			lab_class = kaldi_lab
			lab_kaldi_folder = quick_test/dnn4_pretrain-dbn_dnn_ali_dev
			lab_kaldi_opts = ali-to-pdf
		[/lab1]

		[lab2]
			lab_name = lab_phone_mono
			lab_type = sequence_like_features
			lab_proto = proto/labels/kaldi.proto
			lab_library = data_io
			lab_class = kaldi_lab
			lab_kaldi_folder = quick_test/dnn4_pretrain-dbn_dnn_ali_dev
			lab_kaldi_opts = ali-to-phones --per-frame=true
		[/lab2]

	[/dataset2]

	[dataset3]
		data_name = TIMIT_test
		data_use = test
		n_chunks = 1
		[fea1]
			fea_name = mfcc
			fea_lst = quick_test/data/test/feats_mfcc.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/test/utt2spk  ark:quick_test/mfcc/test_cmvn_speaker.ark ark:- ark:- | add-deltas --delta-order=2 ark:- ark:- |
		[/fea1]

		[fea2]
			fea_name = fbank
			fea_lst = quick_test/data/test/feats_fbank.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/test/utt2spk  ark:quick_test/fbank/cmvn_test.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
		[/fea2]

		[fea3]
			fea_name = fmllr
			fea_lst = quick_test/data/test/feats_fmllr.scp
			fea_proto = proto/features/kaldi.proto
			fea_library = data_io
			fea_class = kaldi_fea
			kaldi_fea_opts = apply-cmvn --utt2spk=ark:quick_test/data/test/utt2spk  ark:quick_test/data-fmllr-tri3/test/test_cmvn.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
		[/fea3]

		[lab1]
			lab_name = lab_phone_cd
			lab_type = sequence_like_features
			lab_proto = proto/labels/kaldi.proto
			lab_library = data_io
			lab_class = kaldi_lab
			lab_kaldi_folder = quick_test/dnn4_pretrain-dbn_dnn_ali_test
			lab_kaldi_opts = ali-to-pdf
		[/lab1]

		[lab2]
			lab_name = lab_phone_mono
			lab_type = sequence_like_features
			lab_proto = proto/labels/kaldi.proto
			lab_library = data_io
			lab_class = kaldi_lab
			lab_kaldi_folder = quick_test/dnn4_pretrain-dbn_dnn_ali_test
			lab_kaldi_opts = ali-to-phones --per-frame=true
		[/lab2]

		[lab3]
			lab_name = lab_word
			lab_type = sequence
			lab_proto = proto/labels/kaldi.proto
			lab_library = data_io
			lab_class = kaldi_word
			lab_kaldi_word = quick_test/data/test/
		[/lab3]

	[/dataset3]

[/datasets]

[data_processing]
	[processing1]
		proc_name = mean_var_norm
		proc_proto = proto/data_processing/mean_var_norm.proto
		proc_library = data_processing
		proc_class = mean_var_norm
		mean_norm = True
		std_norm = True
		use_statistics = chunk
	[/processing1]

	[processing2]
		proc_name = context_expansion
		proc_proto = proto/data_processing/context_expansion.proto
		proc_library = data_processing
		proc_class = context_expansion
		left = 0
		right = 0
	[/processing2]

[/data_processing]

[minibatch_creation]
	batch_size_train = 128
	max_seq_length_train = 1000
	increase_seq_length_train = False
	start_seq_len_train = 100
	multply_factor_seq_len_train = 2
	batch_size_valid = 128
	max_seq_length_valid = 1000
	order_sentence = random
[/minibatch_creation]

[neural_networks]
	[neural_network1]
		nn_name = MLP_layers1
		nn_pretrain_file = none
		nn_freeze = False
		nn_seq_model = False
		nn_device = gpu
		[architecture]
			dnn_proto = proto/MLP.proto
			dnn_library = neural_networks
			dnn_class = MLP
			dnn_lay = 1024,512
			dnn_drop = 0.15,0.15
			dnn_use_laynorm_inp = False
			dnn_use_batchnorm_inp = False
			dnn_use_batchnorm = True,True
			dnn_use_laynorm = False,False
			dnn_act = relu,relu
		[/architecture]

		[optimizer]
			opt_proto = proto/optimizers/sgd.proto
			opt_library = optimizers
			opt_class = sgd
			opt_lr = 0.08
			opt_halving_factor = 0.5
			opt_improvement_threshold = 0.001
			opt_momentum = 0.0
			opt_weight_decay = 0.0
			opt_dampening = 0.0
			opt_nesterov = False
		[/optimizer]

	[/neural_network1]

	[neural_network2]
		nn_name = MLP_layers2
		nn_pretrain_file = none
		nn_freeze = False
		nn_seq_model = False
		nn_device = gpu
		[architecture]
			dnn_proto = proto/MLP.proto
			dnn_library = neural_networks
			dnn_class = MLP
			dnn_lay = 1024,512
			dnn_drop = 0.15,0.15
			dnn_use_laynorm_inp = False
			dnn_use_batchnorm_inp = False
			dnn_use_batchnorm = True,True
			dnn_use_laynorm = False,False
			dnn_act = relu,relu
		[/architecture]

		[optimizer]
			opt_proto = proto/optimizers/sgd.proto
			opt_library = optimizers
			opt_class = sgd
			opt_lr = 0.08
			opt_halving_factor = 0.5
			opt_improvement_threshold = 0.001
			opt_momentum = 0.0
			opt_weight_decay = 0.0
			opt_dampening = 0.0
			opt_nesterov = False
		[/optimizer]

	[/neural_network2]

	[neural_network3]
		nn_name = MLP_layers3
		nn_pretrain_file = none
		nn_freeze = False
		nn_seq_model = False
		nn_device = gpu
		[architecture]
			dnn_proto = proto/MLP.proto
			dnn_library = neural_networks
			dnn_class = MLP
			dnn_lay = 1024,N_out_lab_cd
			dnn_drop = 0.15,0.0
			dnn_use_laynorm_inp = False
			dnn_use_batchnorm_inp = False
			dnn_use_batchnorm = True,True
			dnn_use_laynorm = False,False
			dnn_act = relu,softmax
		[/architecture]

		[optimizer]
			opt_proto = proto/optimizers/sgd.proto
			opt_library = optimizers
			opt_class = sgd
			opt_lr = 0.08
			opt_halving_factor = 0.5
			opt_improvement_threshold = 0.001
			opt_momentum = 0.0
			opt_weight_decay = 0.0
			opt_dampening = 0.0
			opt_nesterov = False
		[/optimizer]

	[/neural_network3]

	[neural_network4]
		nn_name = MLP_layers4
		nn_pretrain_file = none
		nn_freeze = False
		nn_seq_model = False
		nn_device = gpu
		[architecture]
			dnn_proto = proto/MLP.proto
			dnn_library = neural_networks
			dnn_class = MLP
			dnn_lay = 1024,N_out_lab_mono
			dnn_drop = 0.15,0.0
			dnn_use_laynorm_inp = False
			dnn_use_batchnorm_inp = False
			dnn_use_batchnorm = True,True
			dnn_use_laynorm = False,False
			dnn_act = relu,softmax
		[/architecture]

		[optimizer]
			opt_proto = proto/optimizers/sgd.proto
			opt_library = optimizers
			opt_class = sgd
			opt_lr = 0.08
			opt_halving_factor = 0.5
			opt_improvement_threshold = 0.001
			opt_momentum = 0.0
			opt_weight_decay = 0.0
			opt_dampening = 0.0
			opt_nesterov = False
		[/optimizer]

	[/neural_network4]

[/neural_networks]

[post_processing]
	[decoding]
		post_proc_name = kaldi_decoding
		post_proc_proto = proto/decoding/decoding.proto
		post_proc_library = optimizers
		post_proc_class = kaldi_decoder
		kaldi_decoding_folder = kaldi_decoding_scripts/
		kaldi_decoding_script = decode_dnn.sh
		kaldi_min_active = 200
		kaldi_max_active = 7000
		kaldi_max_mem = 50000000
		kaldi_beam = 13.0
		kaldi_latbeam = 8.0
		kaldi_acwt = 0.2
		kaldi_max_arcs = -1
		kaldi_skip_scoring = false
		kaldi_scoring_script = local/score.sh
		kaldi_scoring_opts = "--min-lmwt 1 --max-lmwt 10"
		kaldi_norm_vars = False
	[/decoding]

[/post_processing]

[computations]
    computation_libraries = model_computations,dataprocessing
	data_processing = \{
	    \parallel(
    	    mfcc = mean_var_norm(mfcc)
    	    fbank = mean_var_norm(fbank)
    	    \)
	    
	    \parallel(
    	    mfcc = context_expansion(mfcc) 
    	    fbank = context_expansion(fbank) 
    	    \)
		
		fbank_dim = shape(fbank) 
		\}


	dnn_computations = \{out_dnn1 = MLP_layers1(mfcc) # Computing the output of nn1
		out_dnn2 = MLP_layers2(fbank)  # Computing the output of nn2
		conc_fea = concatenate(out_dnn1,out_dnn2)
		out_dnn3 = MLP_layers3(conc_fea)
		out_dnn4 = MLP_layers4(conc_fea)
		loss_mono = cost_nll(out_dnn4,lab_mono)
		loss_mono_w = mult_constant(loss_mono,1.0)
		loss_cd = cost_nll(out_dnn3,lab_cd)
		loss_final = sum(loss_cd,loss_mono_w)
		err_final = cost_err(out_dnn3,lab_cd)
		print('loss_mono = ',loss_mono)
		print('loss_cd = ',loss_cd)
		print('loss_final = ',loss_final)
		print('err_final = ',err_final)
        \}

	post_processing = \{
		out_dnn3 = normalize_posteriors(out_dnn3)
	    \}

[/computations]

